// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using project_SWD.Data;

#nullable disable

namespace project_SWD.Migrations
{
    [DbContext(typeof(ApplicationDBcontext))]
    partial class ApplicationDBcontextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("project_SWD.Models.category", b =>
                {
                    b.Property<int>("category_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("category_ID"));

                    b.Property<string>("category_Pic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("category_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("category_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("category_ID");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("project_SWD.Models.comment", b =>
                {
                    b.Property<int>("report_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("report_ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("customer_ID")
                        .HasColumnType("int");

                    b.Property<int>("customer_ID1")
                        .HasColumnType("int");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("phone")
                        .HasColumnType("int");

                    b.HasKey("report_ID");

                    b.HasIndex("customer_ID");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("project_SWD.Models.customer", b =>
                {
                    b.Property<int>("customer_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("customer_ID"));

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customer_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("phone")
                        .HasColumnType("int");

                    b.HasKey("customer_ID");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("project_SWD.Models.order", b =>
                {
                    b.Property<int>("order_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("order_ID"));

                    b.Property<int>("customerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.HasKey("order_ID");

                    b.HasIndex("customerID");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("project_SWD.Models.order_item", b =>
                {
                    b.Property<int>("orderItem_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("orderItem_ID"));

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("order_ID")
                        .HasColumnType("int");

                    b.Property<int?>("paymentcustomer_ID")
                        .HasColumnType("int");

                    b.Property<int?>("paymentproduct_ID")
                        .HasColumnType("int");

                    b.Property<int>("product_ID")
                        .HasColumnType("int");

                    b.Property<int>("product_ID1")
                        .HasColumnType("int");

                    b.Property<int>("product_price")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("orderItem_ID");

                    b.HasIndex("order_ID");

                    b.HasIndex("product_ID");

                    b.HasIndex("paymentproduct_ID", "paymentcustomer_ID");

                    b.ToTable("order_items");
                });

            modelBuilder.Entity("project_SWD.Models.payment", b =>
                {
                    b.Property<int>("product_ID")
                        .HasColumnType("int");

                    b.Property<int>("customer_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.HasKey("product_ID", "customer_ID");

                    b.HasIndex("customer_ID");

                    b.ToTable("payments");
                });

            modelBuilder.Entity("project_SWD.Models.product", b =>
                {
                    b.Property<int>("product_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("product_ID"));

                    b.Property<int>("categoryID")
                        .HasColumnType("int");

                    b.Property<string>("img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("product_price")
                        .HasColumnType("int");

                    b.Property<int>("sellerID")
                        .HasColumnType("int");

                    b.HasKey("product_ID");

                    b.HasIndex("categoryID");

                    b.HasIndex("sellerID");

                    b.ToTable("products");
                });

            modelBuilder.Entity("project_SWD.Models.seller", b =>
                {
                    b.Property<int>("seller_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("seller_ID"));

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("phone")
                        .HasColumnType("int");

                    b.Property<string>("seller_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("seller_ID");

                    b.ToTable("sellers");
                });

            modelBuilder.Entity("project_SWD.Models.comment", b =>
                {
                    b.HasOne("project_SWD.Models.customer", "Customer")
                        .WithMany("comments")
                        .HasForeignKey("customer_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("project_SWD.Models.order", b =>
                {
                    b.HasOne("project_SWD.Models.customer", "customer")
                        .WithMany("orders")
                        .HasForeignKey("customerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");
                });

            modelBuilder.Entity("project_SWD.Models.order_item", b =>
                {
                    b.HasOne("project_SWD.Models.order", "order")
                        .WithMany("order_items")
                        .HasForeignKey("order_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project_SWD.Models.product", "product")
                        .WithMany("order_items")
                        .HasForeignKey("product_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project_SWD.Models.payment", null)
                        .WithMany("order_items")
                        .HasForeignKey("paymentproduct_ID", "paymentcustomer_ID");

                    b.Navigation("order");

                    b.Navigation("product");
                });

            modelBuilder.Entity("project_SWD.Models.payment", b =>
                {
                    b.HasOne("project_SWD.Models.customer", "customer")
                        .WithMany("Payments")
                        .HasForeignKey("customer_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project_SWD.Models.product", "product")
                        .WithMany("Payments")
                        .HasForeignKey("product_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("product");
                });

            modelBuilder.Entity("project_SWD.Models.product", b =>
                {
                    b.HasOne("project_SWD.Models.category", "category")
                        .WithMany("products")
                        .HasForeignKey("categoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project_SWD.Models.seller", "seller")
                        .WithMany("products")
                        .HasForeignKey("sellerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");

                    b.Navigation("seller");
                });

            modelBuilder.Entity("project_SWD.Models.category", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("project_SWD.Models.customer", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("comments");

                    b.Navigation("orders");
                });

            modelBuilder.Entity("project_SWD.Models.order", b =>
                {
                    b.Navigation("order_items");
                });

            modelBuilder.Entity("project_SWD.Models.payment", b =>
                {
                    b.Navigation("order_items");
                });

            modelBuilder.Entity("project_SWD.Models.product", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("order_items");
                });

            modelBuilder.Entity("project_SWD.Models.seller", b =>
                {
                    b.Navigation("products");
                });
#pragma warning restore 612, 618
        }
    }
}
